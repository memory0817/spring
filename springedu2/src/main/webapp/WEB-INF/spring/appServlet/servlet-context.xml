<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven>

	<!-- controller에서 메소드 파라미터로 @AuthenticationPrincipal사용하기 위해서는 다음의 빈을 반드시 
		등록해야함 -->
	<argument-resolvers>
	<beans:bean class="org.springframework.security.web.method.annotation.AuthenticationPrincipalArgumentResolver" />
	</argument-resolvers>
	</annotation-driven>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- 의존라이브러리 url 매핑 -->
	<resources mapping="/webjars/**" location="classPath:/META-INF/resources/webjars/" />


	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 파일 업로드 -->
	<beans:bean id="multipartResolver"
							class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="10485760" /> <!-- 10MB -->					
		<beans:property name="defaultEncoding" value="UTF-8" />
	</beans:bean>

	<!-- "com.kh.myapp" 경로상의 모든 클래스를 스캔하여 인스턴스를 자동생성해준다. @Component(@Controller, @service, @Respository -->
	<context:component-scan	base-package="com.kh.myapp"
													use-default-filters="false">
		<context:include-filter type="annotation"
														expression="org.springframework.stereotype.Controller" />
</context:component-scan>
<!-- @PreAuthorize @PostAuthorize 사용선언 -->
<sec:global-method-security pre-post-annotations="enabled"/>

<!-- 인터셉터 시작 -->
<!-- <interceptors>
	 <interceptor>
		<mapping path="/**/"/>
			정적파일경로 배제
			<exclude-mapping path="/resources/**/"/>
			<exclude-mapping path="/webjars/**/"/>
			로긴화면 배제
			<exclude-mapping path="/login/**/"/>
			회원가입화면 배제
			<exclude-mapping path="/member/memberJoinForm"/>
			<exclude-mapping path="/member/memberJoin"/>
			아이디/비밀번호찾기 배제
			<exclude-mapping path="/member/findidForm"/>
			<exclude-mapping path="/member/findid"/>
			<exclude-mapping path="/member/findpwForm"/>
			<exclude-mapping path="/member/findpw"/>
			<exclude-mapping path="/member/upload"/>
			관리자페이지 배제
			
		<beans:bean id="loginCheckInterceptor" 
								class="com.kh.myapp.interceptor.LoginCheckInterceptor" />
		
	
	</interceptor>
 

	<interceptor>
		<mapping path="/bbs/**/"/> 얘는포함시키고
		<exclude-mapping path="/login/**/"/> 얘는배제하겠다
		<beans:bean id="MeasuringInterceptor" 
								class="com.kh.myapp.interceptor.MeasuringInterceptor" />
	</interceptor>
</interceptors>

 -->
</beans:beans>
